// Code generated by mockery v1.0.0. DO NOT EDIT.

package skycoin

import (
	dbutil "github.com/skycoin/skycoin/src/visor/dbutil"
	mock "github.com/stretchr/testify/mock"

	semver "github.com/blang/semver"
)

// mockDbCheckCorruptResetter is an autogenerated mock type for the dbCheckCorruptResetter type
type mockDbCheckCorruptResetter struct {
	mock.Mock
}

// CheckDatabase provides a mock function with given fields: db
func (_m *mockDbCheckCorruptResetter) CheckDatabase(db *dbutil.DB) error {
	ret := _m.Called(db)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbutil.DB) error); ok {
		r0 = rf(db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBVersion provides a mock function with given fields: db
func (_m *mockDbCheckCorruptResetter) GetDBVersion(db *dbutil.DB) (*semver.Version, error) {
	ret := _m.Called(db)

	var r0 *semver.Version
	if rf, ok := ret.Get(0).(func(*dbutil.DB) *semver.Version); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*semver.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dbutil.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetCorruptDB provides a mock function with given fields: db
func (_m *mockDbCheckCorruptResetter) ResetCorruptDB(db *dbutil.DB) (*dbutil.DB, error) {
	ret := _m.Called(db)

	var r0 *dbutil.DB
	if rf, ok := ret.Get(0).(func(*dbutil.DB) *dbutil.DB); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbutil.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dbutil.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDBVersion provides a mock function with given fields: db, v
func (_m *mockDbCheckCorruptResetter) SetDBVersion(db *dbutil.DB, v *semver.Version) error {
	ret := _m.Called(db, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbutil.DB, *semver.Version) error); ok {
		r0 = rf(db, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
